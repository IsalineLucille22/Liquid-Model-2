function [Fin_abund_sim_PVE, Fin_abund_sim_PPU, kappa_mat, mean_PVE_fin_props, Fin_props_sim, Fin_props_obs, W1_used, W2_used] = Main_Fun(Model_fun, mu_max, std_mu_max, kappa_1, std_kappa_1, mean_LN_k1_Pve, mean_LN_k2_Pve, mean_LN_k3_Pve, mean_LN_k1_Ppu, mean_LN_k2_Ppu, mean_LN_k3_Ppu, Threshold, ratios, mean_R_0, sigma_R_0, Time_step, Name_file, save_data)
    %Save or not the figure and data
    close all
    
    DataFile = strcat('./Data/', Name_file, '.mat'); 
    
    %Load observed data
    %Excel data
    Name_Sheet = 'Sheet1'; %Name of the sheet
    data = readmatrix('./Data/Ppu_Pve_toluene_succ_replicate_growth.xlsx', 'Sheet', Name_Sheet);
    data_Final_abund = readmatrix('./Data/Ppu_Pve_toluene_succ_replicate_growth.xlsx', 'Sheet', 4);
    Row_Start = 48;
    Row_Fin = 52;
    Row_col_Start = 2;
    Row_col_Fin = 29;
    data_Evol = data(Row_Start:Row_Fin, Row_col_Start:Row_col_Fin);%table2array(data(Row_Start:Row_Fin, Row_col_Start:Row_col_Fin));
      
    opts_1 = odeset('RelTol',1e-9,'AbsTol',1e-9,'NonNegative',1:9); %To smooth the curves obtained using ode45.
    
    num_ratio_min = ratios(1); %Number of the ratio tested. In experiment, there are 5 different ratios 100:1, 10:1, 1:1, 1:10, 1:100.
    num_ratio_max = ratios(2);
    
    %Output parameters
    tspan = [min(Time_step) max(Time_step)]; %Time in hours
    Abund_init_PVE = data_Evol(:,mod(1:length(data_Evol(1,:)),7) == 1);
    Abund_init_PPU = data_Evol(:,mod(1:length(data_Evol(1,:)),7) == 2);
    Abund_fin_PVE = data_Evol(:,mod(1:length(data_Evol(1,:)),7) == 3);
    Abund_fin_PPU = data_Evol(:,mod(1:length(data_Evol(1,:)),7) == 4);
    Num_Rep = length(Abund_init_PVE(1,:));
    
    %Initialization of final results
    Fin_props_sim = zeros(Num_Rep, (num_ratio_max - num_ratio_min + 1));
    Fin_props_obs = zeros(Num_Rep, (num_ratio_max - num_ratio_min + 1));
    Fin_abund_sim_PVE = zeros(Num_Rep, (num_ratio_max - num_ratio_min + 1));
    Fin_abund_sim_PPU = zeros(Num_Rep, (num_ratio_max - num_ratio_min + 1));
    Fin_abund_obs = zeros(Num_Rep, (num_ratio_max - num_ratio_min + 1));
    Ratio_sim_obs = zeros(Num_Rep, (num_ratio_max - num_ratio_min + 1));
    Fin_W1_used = zeros(Num_Rep, (num_ratio_max - num_ratio_min + 1));
    Fin_W2_used = zeros(Num_Rep, (num_ratio_max - num_ratio_min + 1));
    t_test = zeros(1, (num_ratio_max - num_ratio_min + 1));
    p_ttest = zeros(1, (num_ratio_max - num_ratio_min + 1));
    num_fig = 1;
    k = 1;
    yield_temp = [0.4 0.4 0.4 0.4 0.4; 0.4 0.4 0.4 0.4 0.4];
    for j = num_ratio_min:num_ratio_max
        num_ratio = j;  
        n_iter = Num_Rep;
        if ~isempty(mu_max)
            kappa_2 = [mu_max(1) + normrnd(0,std_mu_max(1), 1, n_iter);...
                mu_max(2) + normrnd(0, std_mu_max(2), 1, n_iter)]; %Unit h^(-1)
            kappa_3 = [kappa_2(1,:)/yield_temp(1,j) - kappa_2(1,:); kappa_2(2,:)/yield_temp(2,j) - kappa_2(2,:)];
            kappa_1_temp = [kappa_1(1) + normrnd(0,std_kappa_1(1), 1, n_iter); kappa_1(2) + normrnd(0, std_kappa_1(2), 1, n_iter)];
        else
            kappa_2 = [lognrnd(mean_LN_k2_Pve(1), mean_LN_k2_Pve(2),  1, n_iter);...
                lognrnd(mean_LN_k2_Ppu(1), mean_LN_k2_Ppu(2),  1, n_iter)];
            kappa_3 = [lognrnd(mean_LN_k3_Pve(1), 0*mean_LN_k3_Pve(2),  1, n_iter);...
                lognrnd(mean_LN_k3_Ppu(1), 0*mean_LN_k3_Ppu(2),  1, n_iter)];
            kappa_3(2,:) = kappa_2(2,:)/0. - kappa_2(2,:);
%             kappa_1_temp = [kappa_1(1) + normrnd(0, 0*std_kappa_1(1), 1, n_iter); kappa_1(2) + normrnd(0, 0*std_kappa_1(2), 1, n_iter)];
            kappa_1_temp = [lognrnd(mean_LN_k1_Pve(1), mean_LN_k1_Pve(2),  1, n_iter);...
                lognrnd(mean_LN_k1_Ppu(1), mean_LN_k1_Ppu(2),  1, n_iter)]; 
        end
        mean_R_0_temp = mean_R_0 + normrnd(0, sigma_R_0, 1, n_iter);

        Tab_output = {};
        Tab_WastUsed = {};
        [Wastes_Evol_1, Wastes_Evol_2, Res_Evol, X_1, X_2] = deal(zeros(length(Time_step),n_iter));
        for i = 1:n_iter
            num_rep = randi(Num_Rep);
            mat_y_0 = [Abund_init_PVE(num_ratio, num_rep) Abund_init_PPU(num_ratio,num_rep) 0 0 0*mean_R_0_temp(i) 0*mean_R_0_temp(i) 1*mean_R_0_temp(i) 0 0 0];
            if strcmp(char(Model_fun),'fun_Simplified')
                kappa_mat = [kappa_2(1,i) kappa_3(1,i) kappa_2(1,i) kappa_3(1,i); kappa_2(2,i) kappa_3(2,i) kappa_2(2,i) kappa_3(2,i)]./mean_R_0_temp;
            else
                kappa_mat = [kappa_1_temp(1,i) kappa_2(1,i) kappa_3(1,i) kappa_1_temp(1,i); kappa_1_temp(2,i) kappa_2(2,i) kappa_3(2,i) kappa_1_temp(2,i)];
            end 
            sol = ode45(@(t, y) Model_fun(t, y, kappa_mat, [Threshold(1,j); Threshold(2,j)]), tspan,  mat_y_0, opts_1);
            z = deval(sol, Time_step);
            sum(z(1:7,:))
            X_1(:,i) = z(1, :) + z(3, :); % W_1: z(5, :);
            X_2(:,i) = z(2, :) + z(4, :); % W_2: z(6, :);
            Tab_output{i} = [Time_step; X_1(:,i)'; X_2(:,i)'];
            Tab_WastUsed{i} = [z(8,:); z(9,:)]; %[W_1 used by S_2; W_2 used by S_1]
            Wastes_Evol_1(:,i) = z(5,:); %W_1 evolution
            Wastes_Evol_2(:,i) = z(6,:); %W_2 evolution
            Res_Evol(:,i) = z(7,:); %R evolution
        end
        %Waste mean biomass evolution relative to time. Bar indicate the
        %standard deviation.
        figure(num_fig)
        num_fig = num_fig + 1;
        mean_Wastes_Evol_1 = mean(Wastes_Evol_1, 2); mean_Wastes_Evol_2 = mean(Wastes_Evol_2, 2);
        mean_X_Evol_1 = mean(X_1, 2); mean_X_Evol_2 = mean(X_2, 2);
        mean_Res_Evol = mean(Res_Evol, 2);
        std_Wastes_Evol_1 = std(Wastes_Evol_1, [], 2); std_Wastes_Evol_2 = std(Wastes_Evol_2, [], 2);
        std_X_Evol_1 = std(X_1, [], 2); std_X_Evol_2 = std(X_2, [], 2);
        std_Res_Evol = std(Res_Evol, [], 2);
        plot(Time_step, mean_X_Evol_1, 'b-', 'LineWidth', 1) 
        errorbar(Time_step, mean_X_Evol_1, std_X_Evol_1, 'b-','LineWidth', 1) 
        hold on
        plot(Time_step, mean_X_Evol_2, 'r-', 'LineWidth', 1) 
        errorbar(Time_step, mean_X_Evol_2, std_X_Evol_2, 'r-','LineWidth', 1) 
        hold on
%         plot(Time_step, mean_Wastes_Evol_1, 'g-', 'LineWidth', 1)
        errorbar(Time_step, mean_Wastes_Evol_1, std_Wastes_Evol_1, 'g-','LineWidth', 1) %Used by S_2
        hold on 
        errorbar(Time_step, mean_Wastes_Evol_2, std_Wastes_Evol_2, 'p-', 'LineWidth', 1) %Used by S_1
        hold on
        errorbar(Time_step, mean_Res_Evol, std_Res_Evol, 'k-','LineWidth', 1) %Used by S_2
%         plot(Time_step, mean_Wastes_Evol_2, 'p-', 'LineWidth', 1)
        ylim([0 2.5e-04])

        %Randomly select nb_sim values among the n_iter values simulated
        ind_sim = randperm(n_iter);
        ind_sim = ind_sim(1:Num_Rep);
    
        Props_sim_PVE = zeros(1, Num_Rep);
        Tot_Gram_Evol = zeros(length(Time_step), Num_Rep);
        PVE_fin_abs = zeros(1, Num_Rep);
        PPU_fin_abs = zeros(1, Num_Rep);
        W1_tot_used = zeros(1, Num_Rep);
        W2_tot_used = zeros(1, Num_Rep);
        for i = 1:Num_Rep
            Temp = Tab_output{ind_sim(i)};
            Temp = Temp';
            Temp_W = Tab_WastUsed{ind_sim(i)};
            Temp_W = Temp_W';
            n_temp = length(Temp(:,1));
            Pve_Gram = Temp(:,2);
            Ppu_Gram = Temp(:,3);
            PVE_fin_abs(i) = Temp(n_temp,2);
            PPU_fin_abs(i) = Temp(n_temp,3);
            W1_tot_used(i) = Temp_W(n_temp,1);
            W2_tot_used(i) = Temp_W(n_temp,2);
            Tot_Gram_Evol(:,i) = Pve_Gram + Ppu_Gram;
            Props_sim_PVE(i) = Temp(n_temp,2)/(Temp(n_temp,3)+Temp(n_temp,2));
        end
        Props_obs_PVE = Abund_fin_PVE(num_ratio,:)./(Abund_fin_PVE(num_ratio,:)+Abund_fin_PPU(num_ratio,:));
        PVE_obs = Abund_fin_PVE(num_ratio,:);
        W1_used = mean(W1_tot_used); W2_used = mean(W2_tot_used);

        %Boxplot stationary Pve's proportion simulated vs observed
        figure(num_fig)
        boxplot([Props_sim_PVE; Props_obs_PVE]', 'Labels',{'Sim','Obs'})
        xlabel('Category')
        ylabel('Proportions')
        title('Boxplots final proportions Pve');
        num_fig = num_fig + 1;

        %Boxplot stationary Pve's absolute biomass simulated vs observed
        figure(num_fig)
        boxplot([PVE_fin_abs; PVE_obs]', 'Labels',{'Sim','Obs'})
        xlabel('Category')
        ylabel('Proportions')
        title('Boxplots final abundances Pve');
        num_fig = num_fig + 1;
    
        %Absolute biomass evolution relative to time
        figure(num_fig)
        plot(Time_step, [X_1(:,i)'; X_2(:,i)'])
        legend('S_1', 'S_2');
        num_fig = num_fig + 1;
        
        [t_test(k), p_ttest(k)] = ttest2(Props_sim_PVE', Props_obs_PVE');
        Fin_props_sim(1:Num_Rep, k) = Props_sim_PVE;
        Fin_props_obs(1:Num_Rep, k) = Props_obs_PVE;
        Fin_abund_sim_PVE(1:Num_Rep, k) = PVE_fin_abs;
        Fin_abund_sim_PPU(1:Num_Rep, k) = PPU_fin_abs;
        Fin_abund_obs(1:Num_Rep, k) = Abund_fin_PVE(num_ratio,:);
        Ratio_sim_obs(1:Num_Rep, k) = Props_sim_PVE./Props_obs_PVE;
        Fin_W1_used(1:Num_Rep, k) = W1_tot_used;
        Fin_W2_used(1:Num_Rep, k) = W2_tot_used;
        k = k + 1;
    end
    mean_PVE_fin_props = mean(Props_sim_PVE);
    
    %Stationary ratio Sim/Obs relative to initial proportions
    figure(num_fig)
    std_sim = flip(std(Ratio_sim_obs));
    mean_sim = flip(mean(Ratio_sim_obs));
    xaxis = [1/100 1/10 1 10 100];
    errorbar(log10(xaxis(num_ratio_min: num_ratio_max)), mean_sim, std_sim,'r--o','MarkerSize',1,'LineWidth', 1,'MarkerEdgeColor','black','MarkerFaceColor','black'); %Experiment with the 5 ratios
    title('Boxplot ratio simulations/observations for P.veronii')
    ylim([0.5 1.6])
    xlabel('Initial ratio')
    ylabel('Final ratio simulation/observation')

    
    %Total absolute biomass wastes used (g/mL) figures 
    num_fig = num_fig + 1;
    figure(num_fig)
    bar(flip([mean(Fin_W2_used)' mean(Fin_W1_used)']), 'stacked')
    hold on 
    errorbar(flip(mean(Fin_W1_used + Fin_W2_used))', flip(std(Fin_W1_used + Fin_W2_used))', '.')
    set(gca, 'YScale', 'log')

    %Stationary absolute biomass of Pve vs Stationary absolute biomass of
    %Ppu
    num_fig = num_fig + 1;
    figure(num_fig)
    x = reshape(Fin_abund_sim_PVE, 1, []); y = reshape(Fin_abund_sim_PPU, 1, []);
    plot(x, y, 'bo')
    l_1 = polyfit(x,y,1); y_est_1 = polyval(l_1,x);
    hold on 
    plot(x,y_est_1,'b--','LineWidth',1)
    xlim([0 8*10^(-5)])
    hold on 
    x = data_Final_abund(1:20,1); y = data_Final_abund(1:20,2); %Read observed stationary abundances
    plot(x,y, 'ro')
    l_2 = polyfit(x,y,1); y_est_2 = polyval(l_2,x);
    hold on 
    plot(x,y_est_2,'r--','LineWidth',1)
    ylim([10^(-5) 11*10^(-5)])
    xlim([0 8*10^(-5)])

    if save_data == 1
        FolderName = '/Users/isalinelucille-guex/Documents/Liquid-models/Succinate/Figures';%strcat(cd, './Figures/');
        FigList = findobj(allchild(0), 'flat', 'Type', 'figure');
        for iFig = 1:length(FigList)
            FigHandle = FigList(iFig);
            FigName = num2str(get(FigHandle, 'Number'));
            FigName = strcat(FolderName, FigName, Name_file);
            set(0, 'CurrentFigure', FigHandle);
            saveas(FigHandle, FigName, 'pdf');
        end
        save(DataFile)
    end
end